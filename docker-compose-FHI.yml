version: "3.6"

services:

    #################################################################################################################################################
    ### Definition des Containers für Arbeitsplatz 3 (Workplace 3)
    ### Beschreibung: Dieser Container übernimmt die Rolle eines Arbeitsplatzes im Leistungserbringer-Segment (z.B. lokales Netzwerk in der Arzpraxis)
    #################################################################################################################################################
    work-station.wp3:
        image: docker-registry:5000/testnetz/work-station.wp3
        #Der Schlüssel build weist Compose an, das Image aus dem Dockerfile zu bauen, das im aktuellen Verzeichniss (.)/work-station/wp3 liegt.
        #Ordner, wo die Sources von diesem Container liegen (Dockerfile und alle benötigte Resources)
        build:
            context: ./work-station/wp3
        #Hostname von dem Container
        hostname: work-station_wp3
        #Da werden die Umgebungsvariablen im Container gesetzt
        environment:
            # d.H. zuerst werden die Netzwerkadaptoren erstellt und dann fährt der Container hoch
            - TESTNETZ_WAIT_INTERFACE=eth1
            - TESTNETZ_GATEWAY=10.33.128.1
        # Linux-Kernel definiert eine Reihe von Berechtigungen – Capabilities, welche Prozessen zugewiesen werden können, um ihnen einen erweiterten Zugriff auf das System zu gestatten
        # Aus Sicherheitsaspekten will man die Capabilities der Container so weit wie möglich einschränken. Für unsere Testzwecke werden alle Berechtigungen zugewiesen
        cap_add:
            - ALL
        # Der Container ist an folgende Netzwerke angeschlossen
        networks:
            # Man meint hier, dass es sich um ein lokales Netzwerk handelt, an dem Host-Rechner angeschlossen ist und der Container eine IP-Adresse aus dem IP-Addressenbereich hat.
            konn-lan:
                # Container hat die IP-Addresse aus dem konn-lan Netzwerk
                ipv4_address: 10.33.128.221
                # Hilfs-Parameter
                # Wir wollen die Reihenfolge von Netzwerkschnittstellen immer gleich haben
                interface_index: 0 #eth0
            # Jeder Container ist an Management-Netz angeschlossen. Mit ssh root@10.60.5.91 kann man eine Verbindung aufbauen lassen
            management:
                ipv4_address: 10.60.5.91
                interface_index: 1 #eth2

    #################################################################################################################################################
    ### Definition des Containers für Arbeitsplatz 2 (Workplace 2)
    ### Beschreibung: Dieser Container übernimmt die Rolle eine Arbeitsplazes im Leistungserbringer-Segment (z.B. lokales Netzwerk in der Arzpraxis)
    #################################################################################################################################################
    work-station.wp2:
        image: docker-registry:5000/testnetz/work-station.wp2
        build:
            context: ./work-station/wp2
        hostname: work-station_wp2
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
            - TESTNETZ_GATEWAY=10.33.128.1
        cap_add:
            - ALL
        networks:
            konn-lan:
                ipv4_address: 10.33.128.210
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.90
                interface_index: 1 #eth2

    #################################################################################################################################################
    ### Definition des Containers für Router-Dnsmasq (router.dnsmasq)
    ### Beschreibung: Dieser Container übernimmt die Rolle eines DHCP-Server
    #################################################################################################################################################
    router.dnsmasq:
        image: docker-registry:5000/testnetz/router.dnsmasq
        build:
            context: ./router/dnsmasq
        hostname: router_dnsmasq
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
        cap_add:
            - ALL
        networks:
            konn-wan:
                ipv4_address: 192.168.3.254
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.11
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers für Router-NAT (router.nat)
    ### Beschreibung: Dieser Container übernimmt die Rolle des Netzwerkadressübersetzung
    #################################################################################################################################################
    router.nat:
        image: docker-registry:5000/testnetz/router.nat
        build:
            context: ./router/nat
        hostname: router_nat
        environment:
#            - TESTNETZ_GATEWAY=10.33.128.1
            - TESTNETZ_WAIT_INTERFACE=eth3
        cap_add:
            - ALL
        networks:
            router-inet:
                ipv4_address: 11.222.0.7
                interface_index: 0 #eth0
            konn-wan:
                ipv4_address: 192.168.3.10
                interface_index: 1 #eth1
            konn-lan:
                ipv4_address: 10.33.128.2
                interface_index: 2 #eth0
            management:
                ipv4_address: 10.60.5.10
                interface_index: 2 #eth3
            remote-net:
                ipv4_address: 10.10.10.3
                interface_index: 3 #eth4

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container liefert trust-anchor file
    #################################################################################################################################################
    trust-anchor.httpd:
        image: docker-registry:5000/testnetz/trust-anchor.httpd
        build:
            context: ./trust-anchor/httpd
        hostname: trust-anchor_httpd
        depends_on:
            - router.nat
        environment:
            - TESTNETZ_GATEWAY=11.222.0.7 # router.nat
            - TESTNETZ_WAIT_INTERFACE=eth1
        cap_add:
            - ALL
        networks:
            router-inet:
                ipv4_address: 11.222.0.8
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.7
                interface_index: 1 #eth1

#    lansim.dnsmasq:
#        image: docker-registry:5000/testnetz/lansim.dnsmasq
#        build:
#            context: ./lansim/dnsmasq
#        hostname: lansim_dnsmasq
#        cap_add:
#            - ALL
#        depends_on:
#            - router.nat
#        environment:
#            - TESTNETZ_GATEWAY=192.168.2.1 # router.nat
#            - TESTNETZ_WAIT_INTERFACE=eth1
#        networks:
#            konn-lan:
#                ipv4_address: 192.168.2.253
#                interface_index: 0 #eth0
#            management:
#                ipv4_address: 10.60.5.20
#                interface_index: 1 #eth1
#        dns:
#            # Diese Eintraege entsprechen "nameserver a.b.c.d" in /etc/resolv.conf.
#            # Quelle: https://docs.docker.com/engine/userguide/networking/configure-dns/
#            - 11.222.0.4 # dns-public.bind9

#    lansim.isc-dhcpd:
#        image: docker-registry:5000/testnetz/lansim.isc-dhcpd
#        build:
#            context: ./lansim/isc-dhcpd
#        hostname: lansim_isc-dhcpd
#        cap_add:
#            - ALL
#        environment:
#            - TESTNETZ_WAIT_INTERFACE=eth1
#        networks:
#            konn-lan:
#                ipv4_address: 192.168.2.254
#                interface_index: 0 #eth0
#            management:
#                ipv4_address: 10.60.5.21
#                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container stell die Funktionalität des Remote-Managers zur Verfügung 
    #################################################################################################################################################
#    remoteserver.manager:
#        image: docker-registry:5000/testnetz/remoteserver.manager
#        build:
#            context: ./remoteserver/manager
#        hostname: remoteserver_manager
#        cap_add:
#            - ALL
#        environment:
#            - TESTNETZ_WAIT_INTERFACE=eth2
#        networks:
#            router-inet:
#                ipv4_address: 11.222.0.123
#                interface_index: 0 #eth0
#            management:
#                ipv4_address: 10.60.5.8
#                interface_index: 1 #eth1
#            remote-net:
#                ipv4_address: 10.10.10.2
#                interface_index: 2 #eth2

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container fungiert als NTP-Komponente
    #################################################################################################################################################
    ntp-ti.ntpd:
        image: docker-registry:5000/testnetz/ntp-ti.ntpd
        build:
            context: ./ntp-ti/ntpd
        hostname: ntp-ti_ntpd
        cap_add:
            - ALL
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        environment:
            - TESTNETZ_GATEWAY=172.24.1.193 # ti-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            ti-zentral:
                ipv4_address: 172.24.0.65 
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.68
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    ocsp-ti.java:
        image: docker-registry:5000/testnetz/ocsp-ti.java
        build:
            context: ./ocsp-ti/java
        hostname: ocsp-ti_java
        cap_add:
            - ALL
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        environment:
            - TESTNETZ_GATEWAY=172.24.1.193 # ti-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            ti-zentral:
                ipv4_address: 172.24.0.193 
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.71
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container stellt dnsmasq-Funktionalität im ti-Zone zur Verfügung
    #################################################################################################################################################
    ti-konzentrator.dnsmasq:
        image: docker-registry:5000/testnetz/ti-konzentrator.dnsmasq
        build:
            context: ./ti-konzentrator/dnsmasq
        hostname: ti-konzentrator_dnsmasq
        cap_add:
            - ALL
        depends_on:
            - ti-konzentrator.strongswan
        environment:
 #           - TESTNETZ_GATEWAY=172.20.0.101 # ti-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            konn-ti:
                ipv4_address: 172.20.0.254
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.33
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container ist für die VPN-Tunnel im ti-Zone verantwortlich
    #################################################################################################################################################
    ti-konzentrator.strongswan:
        image: docker-registry:5000/testnetz/ti-konzentrator.strongswan
        build:
            context: ./ti-konzentrator/strongswan
        hostname: ti-konzentrator_strongswan
        cap_add:
            - ALL
        depends_on:
            - router.nat
        environment:
            - TESTNETZ_GATEWAY=11.222.0.7 # router.nat
            - TESTNETZ_WAIT_INTERFACE=eth5
        networks:
            router-inet:
                ipv4_address: 11.222.0.40
                interface_index: 0 #eth0
            ti-vpn:
                ipv4_address: 172.25.0.19
                interface_index: 1 #eth1
            ti-zentral:
                ipv4_address: 172.24.1.193
                interface_index: 2 #eth2
            konn-ti:
                ipv4_address: 172.20.0.101
                interface_index: 3 #eth3
            management:
                ipv4_address: 10.60.5.3
                interface_index: 4 #eth4
            ti-offen-fach:                 # Interface zu NET_TI_OFFENE_FD
                ipv4_address: 172.30.0.10
                interface_index: 5 #eth5
        volumes:
            - /lib/modules:/lib/modules:ro

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container stellt dnsmasq-Funktionalität im sis-Zone zur Verfügung
    #################################################################################################################################################
    sis-konzentrator.dnsmasq:
        image: docker-registry:5000/testnetz/sis-konzentrator.dnsmasq
        build:
            context: ./sis-konzentrator/dnsmasq
        hostname: sis-konzentrator_dnsmasq
        cap_add:
            - ALL
        depends_on:
            - sis-konzentrator.strongswan
        environment:
            - TESTNETZ_GATEWAY=172.16.0.101 # sis-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            konn-sis:
                ipv4_address: 172.16.0.254
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.34
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container ist für die VPN-Tunnel im sis-Zone verantwortlich
    #################################################################################################################################################
    sis-konzentrator.strongswan:
        image: docker-registry:5000/testnetz/sis-konzentrator.strongswan
        build:
            context: ./sis-konzentrator/strongswan
        hostname: sis-konzentrator_strongswan
        cap_add:
            - ALL
        depends_on:
            - router.nat
        environment:
            - TESTNETZ_GATEWAY=10.33.128.1 # OpenWrt-Router
            - TESTNETZ_WAIT_INTERFACE=eth6
        networks:
            router-inet:
                ipv4_address: 11.222.0.39
                interface_index: 0 #eth0
            sis-vpn:
                ipv4_address: 172.25.0.13
                interface_index: 1 #eth1
            sis-inet:
                ipv4_address: 1.2.3.19
                interface_index: 2 #eth2
            konn-sis:
                ipv4_address: 172.16.0.101
                interface_index: 3 #eth3
            konn-lan:
                ipv4_address: 10.33.128.39
                interface_index: 4 #eth4
            management:
                ipv4_address: 10.60.5.49
                interface_index: 5 #eth5
            remote-net:
                ipv4_address: 10.10.10.49
                interface_index: 6 #eth6
        volumes:
            - /lib/modules:/lib/modules:ro

    vsdm-ti.httpd:
        image: docker-registry:5000/testnetz/vsdm-ti.httpd
        build:
            context: ./vsdm-ti/httpd
        hostname: vsdm-ti_httpd
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        networks:
            ti-fach:
                ipv4_address: 172.28.0.2
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.120
                interface_index: 1 #eth1

    intermediaer.httpd:
        image: docker-registry:5000/testnetz/intermediaer-ti.httpd
        build:
            context: ./intermediaer-ti/httpd
        hostname: intermediar-ti_httpd
        cap_add:
            - NET_ADMIN
        depends_on:
            - dns-ti.bind9
            - ti-konzentrator.dnsmasq
        environment:
            - TESTNETZ_GATEWAY=172.24.1.193 # ti-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth2
        dns: 172.24.0.1
        networks:
            ti-zentral:
                ipv4_address: 172.24.1.65
                interface_index: 0 #eth0
            ti-fach:
                ipv4_address: 172.28.0.4
                interface_index: 1 #eth1
            management:
                ipv4_address: 10.60.5.67
                interface_index: 2 #eth2

    tsl-ti:
        image: docker-registry:5000/testnetz/tsl-ti
        build:
            context: ./tsl-ti/httpd
        hostname: tsl-ti
        cap_add:
            - ALL
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        environment:
            - TESTNETZ_GATEWAY=172.24.1.193 # ti-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            ti-zentral:
                ipv4_address: 172.24.0.129
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.64
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Der Container ist als Klon von VSDM in NET_TI_OFFENE_FD gedacht.
    #################################################################################################################################################
    vsdm-ti-offen-fd.httpd:
        image: docker-registry:5000/testnetz/vsdm-ti-offen-fd.httpd
        build:
            context: ./vsdm-ti-offen-fd/httpd
        hostname: vsdm-ti-offen-fd_httpd
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        networks:
            ti-offen-fach:
                ipv4_address: 172.30.0.2
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.121
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    dns-ti.bind9:
        image: docker-registry:5000/testnetz/dns-ti.bind9
        build:
            context: ./dns-ti/bind9
        hostname: dns-ti_bind9
        cap_add:
            - ALL
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        environment:
            - TESTNETZ_GATEWAY=172.24.1.193 # ti-konzentrator.strongswan
            - TESTNETZ_WAIT_INTERFACE=eth1
            - DB_TELEMATIK_TEST_EXPIRE=20201231235959
            - DB_TI_ZENTRAL_PTR_EXPIRE=20201231235959
            - DB_VPNZUGD_PTR_EXPIRE=20201231235959
            - DB_TI_FACH_PTR_EXPIRE=20201231235959
        networks:
            ti-zentral:
                ipv4_address: 172.24.0.12
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.69
                interface_index: 1 #eth1
        dns:
            # Diese Eintraege entsprechen "nameserver a.b.c.d" in /etc/resolv.conf.
            # Quelle: https://docs.docker.com/engine/userguide/networking/configure-dns/
            - 172.24.0.1 # dns-ti.bind9

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    dns-sis.bind9:
        image: docker-registry:5000/testnetz/dns-sis.bind9
        build:
            context: ./dns-sis/bind9
        hostname: dns-sis_bind9
        cap_add:
            - ALL
        depends_on:
            - router.nat
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
            - DB_TEST_EXPIRE=20201231235959
            - DB_ROOT_EXPIRE=20201231235959
            - DB_ROUTER_INET_PTR_EXPIRE=20201231235959
            - DB_DE_EXPIRE=20201231235959
            - DB_DOMAIN_EXPIRE=20201231235959
        networks:
            sis-inet:
                ipv4_address: 1.2.3.4
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.35
                interface_index: 1 #eth1
        dns:
            # Diese Eintraege entsprechen "nameserver a.b.c.d" in /etc/resolv.conf.
            # Quelle: https://docs.docker.com/engine/userguide/networking/configure-dns/
            - 1.2.3.4 # dns-sis.bind9

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    dns-public.bind9:
        image: docker-registry:5000/testnetz/dns-public.bind9
        build:
            context: ./dns-public/bind9
        hostname: dns-public_bind9
        cap_add:
            - ALL
        depends_on:
            - router.nat
        environment:
            - TESTNETZ_GATEWAY=11.222.0.7 # router.nat
            - TESTNETZ_WAIT_INTERFACE=eth1
            - DB_TEST_EXPIRE=20201231235959
            - DB_ROOT_EXPIRE=20201231235959
            - DB_ROUTER_INET_PTR_EXPIRE=20201231235959
            - DB_DOMAIN_EXPIRE=20201231235959
        networks:
            router-inet:
                ipv4_address: 11.222.0.4
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.5
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    crl-ti.httpd:
        image: docker-registry:5000/testnetz/crl-ti.httpd
        build:
            context: ./crl-ti/httpd
        hostname: crl-ti_httpd
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth2
        depends_on:
            - ti-konzentrator.strongswan
            - ti-konzentrator.dnsmasq
        networks:
            router-inet:
                ipv4_address: 11.222.0.80
                interface_index: 0 #eth0
            ti-vpn:
                ipv4_address: 172.25.0.21
                interface_index: 1 #eth1
            management:
                ipv4_address: 10.60.5.32
                interface_index: 2 #eth2

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    sis-webserver.httpd:
        image: docker-registry:5000/testnetz/sis-webserver.httpd
        build:
            context: ./sis-webserver/httpd
        hostname: sis-webserver_httpd
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            sis-inet:
                ipv4_address: 1.2.3.10
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.92
                interface_index: 1 #eth2

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container
    #################################################################################################################################################
    register-ti.httpd:
        image: docker-registry:5000/testnetz/register-ti.java
        build:
            context: ./register-ti/java
        hostname: register-ti_java
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth2
        depends_on:
            - router.nat
        networks:
            router-inet:
                ipv4_address: 11.222.0.70
                interface_index: 0 #eth0
            ti-vpn:
                ipv4_address: 172.25.0.20
                interface_index: 1 #eth1
            management:
                ipv4_address: 10.60.5.31
                interface_index: 2 #eth2

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Dieser Container stellt DNS Funktionalität in Bestandsnetz Zone zu Verfügung
    #################################################################################################################################################
    dns-bestd-net.dnsmasq:
        image: docker-registry:5000/testnetz/dns-bestd-net.dnsmasq
        build:
            context: ./dns-bestd-net/dnsmasq
        hostname: dns-bestd-net_dnsmasq
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
        networks:
            bestd-net:
                ipv4_address: 10.0.0.2
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.36
                interface_index: 1 #eth1

    #################################################################################################################################################
    ### Definition des Containers
    ### Beschreibung: Ein Rechner des Bestandsnetzes
    #################################################################################################################################################
    wp-bn.bestandsnetz:
        image: docker-registry:5000/testnetz/wp-bn.bestandsnetz
        build:
            context: ./wp-bn/bestandsnetz
        hostname: wp-bn_bestandsnetz
        cap_add:
            - ALL
        environment:
            - TESTNETZ_WAIT_INTERFACE=eth1
        dns: -10.0.0.2
        networks:
            bestd-net:
                ipv4_address: 10.0.1.10
                interface_index: 0 #eth0
            management:
                ipv4_address: 10.60.5.77
                interface_index: 1 #eth1

networks:
    # Gateway-Workaround:
    # Siehe: https://github.com/docker/docker/issues/20758
    # Damit Docker nicht selbst die IP-Adresse des Gateways belegt, wird "gateway"
    # auf eine ungenutzte Adresse gesetzt.
    #
    # Ggf. ist es nötig, dass Interfaces im Container den simulierten Gateway
    # benutzen.  Das könnte dann via `aux_addresses` und `DefaultGatewayIPv4`
    # erreicht werden.

    # WICHTIG
    # Die Variablen KONN_[WAN|LAN]_INTERFACE sollten in einer .env Datei
    # gesetzt werden. docker-compose liest diese dann automatisch ein.
    # Beispiel-Inhalt:
    # KONN_LAN_INTERFACE=enx006062b10a1b
    # KONN_WAN_INTERFACE=enx803f5d090088

    # Transportnetz
    # TODO Optional vom Typ macvlan
    router-inet:
        driver: bridge
        ipam:
            driver: default
            config:
                # Internet
                - subnet: 11.222.0.0/24
                # TODO Remote Server Subnetz, wenn Netzwerk auf macvlan basiert.
                # Remote Server
                #- subnet: 10.10.10.0/24

    # LE-Netz im Reihe-Modus
    # eth1 des Konnektors
    konn-wan:
        driver: macvlan
        driver_opts:
            parent: ${KONN_WAN_INTERFACE:-invalid}
        ipam:
            driver: default
            config:
                - subnet: 192.168.3.0/24
#                  gateway: 192.168.3.199

    # LE-Netz im Parallel-Modus
    # eth0 des Konnektors
    konn-lan:
        driver: macvlan
        driver_opts:
            parent: ${KONN_LAN_INTERFACE:-invalid}
        ipam:
            driver: default
            config:
                - subnet: 10.33.128.0/24 #192.168.2.0/24
#                  gateway: 10.33.128.1 #192.168.2.199

    # Kontrolle der simulierten Komponenten
    management:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.60.5.0/24

    # Zentrale Dienste
    ti-zentral:
        driver: macvlan
        ipam:
            driver: default
            config:
                - subnet: 172.24.0.0/16
#                  gateway: 172.24.0.199

    # Konnektor IPSec TI
    konn-ti:
        driver: macvlan
        #driver_opts:
            #parent: <none> --> dummy macvlan
        ipam:
            driver: default
            config:
                - subnet: 172.20.0.0/14

    # Zugangszone TI
    ti-vpn:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.25.0.16/28
#                  gateway: 172.25.0.30

    # Gesicherte Fachdienste
    ti-fach:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.28.0.0/26

    # Offene Fachdienste (NET_TI_OFFENE_FD)
    ti-offen-fach:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.30.0.0/26

    # Zugangszone SIS
    sis-vpn:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.25.0.0/28
#                  gateway: 172.25.0.14

    # SIS Inet
    sis-inet:
        driver: bridge #macvlan
        #driver_opts:
            #parent: <none> --> dummy macvlan
        ipam:
            driver: default
            config:
                - subnet: 1.2.3.0/24
#                  gateway: 1.2.3.199

    # Konnektor IPSec SIS
    konn-sis:
        driver: macvlan
        #driver_opts:
            #parent: <none> --> dummy macvlan
        ipam:
            driver: default
            config:
                - subnet: 172.16.0.0/14

    # Zone Remote
    remote-net:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.10.0.0/16

    # Zone Bestandsnetze
    bestd-net:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 10.0.0.0/22

